import{U as e}from"./_constants-Cre2CkpB.js";const r=23,t=24,s=25,o=28,n=27,h=9,i=0,a=1,w=5,u=0,g=1,c=0,m=1,E=2;class d{start(){throw new Error(e)}stop(){throw new Error(e)}getCurrent(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}setFreqMode(r){throw new Error(e)}getFreqMode(){throw new Error(e)}}class S{getAirPressure(){throw new Error(e)}getAltitude(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class l{_sensor;constructor(e){this._sensor=e}getCurrent(){return this._sensor.current}onChange(e){this._sensor.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this._sensor.removeEventListener(hmSensor.event.CHANGE,e)}}class p extends l{constructor(){super(hmSensor.createSensor(hmSensor.id.BATTERY))}}class C{#e;constructor(){this.#e=hmSensor.createSensor(hmSensor.id.SPO2)}getCurrent(){return{value:this.#e.current,time:this.#e.time,retCode:this.#e.time.retcode}}getLastDay(){return this.#e.hourAvgofDay}start(){return this.#e.start()}stop(){return this.#e.stop()}onChange(e){this.#e.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this.#e.removeEventListener(hmSensor.event.CHANGE,e)}getLastFewHour(r){throw new Error(e)}}class v extends l{getTarget(){return this._sensor.target}}class f extends v{constructor(){super(hmSensor.createSensor(hmSensor.id.CALORIE))}}class L{start(){throw new Error(e)}stop(){throw new Error(e)}getStatus(){throw new Error(e)}getDirection(){throw new Error(e)}getDirectionAngle(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class T extends l{constructor(){super(hmSensor.createSensor(hmSensor.id.DISTANCE))}}class A extends v{constructor(){super(hmSensor.createSensor(hmSensor.id.FAT_BURRING))}}class _{start(){throw new Error(e)}stop(){throw new Error(e)}getStatus(){throw new Error(e)}getLatitude(r){throw new Error(e)}getLongitude(r){throw new Error(e)}getSetting(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}onGnssChange(r){throw new Error(e)}offGnssChange(r){throw new Error(e)}}class y{start(){throw new Error(e)}stop(){throw new Error(e)}getCurrent(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}setFreqMode(r){throw new Error(e)}getFreqMode(){throw new Error(e)}}class H{#r;constructor(){this.#r=hmSensor.createSensor(hmSensor.id.HEART)}getCurrent(){return this.#r.current}getLast(){return this.#r.last}getToday(){return this.#r.today}onCurrentChange(e){this.#r.addEventListener(this.#r.event.CURRENT,e)}offCurrentChange(e){this.#r.removeEventListener(this.#r.event.CURRENT,e)}onLastChange(e){this.#r.addEventListener(this.#r.event.LAST,e)}offLastChange(e){this.#r.removeEventListener(this.#r.event.LAST,e)}getDailySummary(){throw new Error(e)}getResting(){throw new Error(e)}getAFibRecord(){throw new Error(e)}onRestingChange(r){throw new Error(e)}offRestingChange(r){throw new Error(e)}}class M{#t;constructor(){this.#t=hmSensor.createSensor(hmSensor.id.PAI)}getTotal(){return this.#t.totalpai}getToday(){return this.#t.dailypai}getLastWeek(){return[this.#t.prepai6,this.#t.prepai5,this.#t.prepai4,this.#t.prepai3,this.#t.prepai2,this.#t.prepai1,this.#t.prepai0]}}class R{getStatus(){throw new Error(e)}getAodMode(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class N{#s;constructor(){this.#s=hmSensor.createSensor(hmSensor.id.TIME)}getTime(){return this.#s.utc}getFullYear(){return this.#s.year}getMonth(){return this.#s.month}getDate(){return this.#s.day}getHours(){return this.#s.hour}getMinutes(){return this.#s.minute}getSeconds(){return this.#s.second}getDay(){return this.#s.week}getHourFormat(){return this.#s.is24Hour?1:0}getFormatHour(){return this.#s.format_hour}onPerMinute(e){this.#s.addEventListener(this.#s.event.MINUTEEND,e)}onPerDay(e){this.#s.addEventListener(this.#s.event.DAYCHANGE,e)}getFestival(){return this.#s.solar_festival}getLunarYear(){return this.#s.lunar_year}getLunarMonth(){return this.#s.lunar_month}getLunarDay(){return this.#s.lunar_day}getLunarFestival(){return this.#s.lunar_festival}getSolarTerm(){return this.#s.lunar_solar_term}getShowFestival(){return this.#s.getShowFestival()}getLunarMonthCalendar(){return this.#s.getLunarMonthCalendar()}onSunrise(r){throw new Error(e)}onSunset(r){throw new Error(e)}onPhoneTimeSetting(r){throw new Error(e)}}class F{#o;constructor(){this.#o=hmSensor.createSensor(hmSensor.id.SLEEP)}updateInfo(){this.#o.updateInfo()}getInfo(){const e=this.#o.getBasicInfo();return{score:e.score,deepTime:e.deepMin,startTime:e.startTime,endTime:e.endTime,totalTime:this.#o.getTotalTime()}}getStageConstantObj(){return this.#o.getSleepStageModel()}getStage(){return this.#o.getSleepStageData()}getSleepingStatus(){const e=Math.floor((new N).getTime()/6e4)%1440,r=this.#o.getBasicInfo();return e>r.startTime&&e<r.endTime?1:0}getNap(){throw new Error(e)}}class D extends v{constructor(){super(hmSensor.createSensor(hmSensor.id.STAND))}}class k extends v{constructor(){super(hmSensor.createSensor(hmSensor.id.STEP))}}class I{#n;constructor(){this.#n=hmSensor.createSensor(hmSensor.id.STRESS)}getCurrent(){return{value:this.#n.current,time:this.#n.time}}onChange(e){this.#n.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this.#n.removeEventListener(hmSensor.event.CHANGE,e)}getToday(){throw new Error(e)}getTodayByHour(){throw new Error(e)}getLastWeek(){throw new Error(e)}getLastWeekByHour(){throw new Error(e)}}class G{#h;#i;constructor(){this.#h=hmSensor.createSensor(hmSensor.id.VIBRATE)}start(e){e&&(this.#i=this.getConfig(),this.setMode(e)),this.#h.start()}stop(){this.#h.stop(),this.#i&&(this.setMode(this.#i),this.#i=void 0)}setMode(e){e.mode&&(this.#h.scene=e.mode)}getConfig(){return{mode:this.#h.scene}}}class O{#a;constructor(){this.#a=hmSensor.createSensor(hmSensor.id.WEAR)}getStatus(){return this.#a.current}onChange(e){this.#a.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this.#a.removeEventListener(hmSensor.event.CHANGE,e)}}class W{#w;constructor(){this.#w=hmSensor.createSensor(hmSensor.id.WEATHER)}getForecastWeather(){return this.#w.getForecastWeather()}}class b{getStatus(){throw new Error(e)}getHistory(){throw new Error(e)}}class x{#u;constructor(){this.#u=hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)}getCount(){this.#u.init();const e=this.#u.getWorldClockCount();return this.#u.uninit(),e}getInfo(e){this.#u.init();const r=this.#u.getWorldClockCountInfo(e);return this.#u.uninit(),r}}export{d as Accelerometer,S as Barometer,p as Battery,C as BloodOxygen,f as Calorie,L as Compass,T as Distance,E as FREQ_MODE_HIGH,c as FREQ_MODE_LOW,m as FREQ_MODE_NORMAL,A as FatBurning,_ as Geolocation,y as Gyroscope,H as HeartRate,M as Pai,R as Screen,F as Sleep,D as Stand,k as Step,I as Stress,u as TIME_HOUR_FORMAT_12,g as TIME_HOUR_FORMAT_24,N as Time,a as VIBRATOR_SCENE_CALL,o as VIBRATOR_SCENE_DURATION,n as VIBRATOR_SCENE_DURATION_LONG,i as VIBRATOR_SCENE_NOTIFICATION,r as VIBRATOR_SCENE_SHORT_LIGHT,t as VIBRATOR_SCENE_SHORT_MIDDLE,s as VIBRATOR_SCENE_SHORT_STRONG,h as VIBRATOR_SCENE_STRONG_REMINDER,w as VIBRATOR_SCENE_TIMER,G as Vibrator,O as Wear,W as Weather,b as Workout,x as WorldClock};
