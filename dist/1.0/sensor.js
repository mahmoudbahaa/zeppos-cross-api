import{U as e}from"./_constants-Cre2CkpB.js";const r=23,t=24,o=25,s=28,n=27,a=9,i=0,h=1,g=5,u=0,w=1,c=0,m=1,S=2;class Accelerometer{start(){throw new Error(e)}stop(){throw new Error(e)}getCurrent(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}setFreqMode(r){throw new Error(e)}getFreqMode(){throw new Error(e)}}class Barometer{getAirPressure(){throw new Error(e)}getAltitude(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class BaseSensorNoTarget{constructor(e){this._sensor=e}getCurrent(){return this._sensor.current}onChange(e){this._sensor.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this._sensor.removeEventListener(hmSensor.event.CHANGE,e)}}class Battery extends BaseSensorNoTarget{constructor(){super(hmSensor.createSensor(hmSensor.id.BATTERY))}}class BloodOxygen{constructor(){this._spo2=hmSensor.createSensor(hmSensor.id.SPO2)}getCurrent(){return{value:this._spo2.current,time:this._spo2.time,retCode:this._spo2.time.retcode}}getLastDay(){return this._spo2.hourAvgofDay}start(){return this._spo2.start()}stop(){return this._spo2.stop()}onChange(e){this._spo2.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this._spo2.removeEventListener(hmSensor.event.CHANGE,e)}getLastFewHour(r){throw new Error(e)}}class BaseSensor extends BaseSensorNoTarget{getTarget(){return this._sensor.target}}class Calorie extends BaseSensor{constructor(){super(hmSensor.createSensor(hmSensor.id.CALORIE))}}class Compass{start(){throw new Error(e)}stop(){throw new Error(e)}getStatus(){throw new Error(e)}getDirection(){throw new Error(e)}getDirectionAngle(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class Distance extends BaseSensorNoTarget{constructor(){super(hmSensor.createSensor(hmSensor.id.DISTANCE))}}class FatBurning extends BaseSensor{constructor(){super(hmSensor.createSensor(hmSensor.id.FAT_BURRING))}}class Geolocation{start(){throw new Error(e)}stop(){throw new Error(e)}getStatus(){throw new Error(e)}getLatitude(r){throw new Error(e)}getLongitude(r){throw new Error(e)}getSetting(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}onGnssChange(r){throw new Error(e)}offGnssChange(r){throw new Error(e)}}class Gyroscope{start(){throw new Error(e)}stop(){throw new Error(e)}getCurrent(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}setFreqMode(r){throw new Error(e)}getFreqMode(){throw new Error(e)}}class HeartRate{constructor(){this._heart=hmSensor.createSensor(hmSensor.id.HEART)}getCurrent(){return this._heart.current}getLast(){return this._heart.last}getToday(){return this._heart.today}onCurrentChange(e){this._heart.addEventListener(this._heart.event.CURRENT,e)}offCurrentChange(e){this._heart.removeEventListener(this._heart.event.CURRENT,e)}onLastChange(e){this._heart.addEventListener(this._heart.event.LAST,e)}offLastChange(e){this._heart.removeEventListener(this._heart.event.LAST,e)}getDailySummary(){throw new Error(e)}getResting(){throw new Error(e)}getAFibRecord(){throw new Error(e)}onRestingChange(r){throw new Error(e)}offRestingChange(r){throw new Error(e)}}class Pai{constructor(){this._pai=hmSensor.createSensor(hmSensor.id.PAI)}getTotal(){return this._pai.totalpai}getToday(){return this._pai.dailypai}getLastWeek(){return[this._pai.prepai6,this._pai.prepai5,this._pai.prepai4,this._pai.prepai3,this._pai.prepai2,this._pai.prepai1,this._pai.prepai0]}}class Screen{getStatus(){throw new Error(e)}getAodMode(){throw new Error(e)}onChange(r){throw new Error(e)}offChange(r){throw new Error(e)}}class Time{constructor(){this._time=hmSensor.createSensor(hmSensor.id.TIME)}getTime(){return this._time.utc}getFullYear(){return this._time.year}getMonth(){return this._time.month}getDate(){return this._time.day}getHours(){return this._time.hour}getMinutes(){return this._time.minute}getSeconds(){return this._time.second}getDay(){return this._time.week}getHourFormat(){return this._time.is24Hour?1:0}getFormatHour(){return this._time.format_hour}onPerMinute(e){this._time.addEventListener(this._time.event.MINUTEEND,e)}onPerDay(e){this._time.addEventListener(this._time.event.DAYCHANGE,e)}getFestival(){return this._time.solar_festival}getLunarYear(){return this._time.lunar_year}getLunarMonth(){return this._time.lunar_month}getLunarDay(){return this._time.lunar_day}getLunarFestival(){return this._time.lunar_festival}getSolarTerm(){return this._time.lunar_solar_term}getShowFestival(){return this._time.getShowFestival()}getLunarMonthCalendar(){return this._time.getLunarMonthCalendar()}onSunrise(r){throw new Error(e)}onSunset(r){throw new Error(e)}onPhoneTimeSetting(r){throw new Error(e)}}class Sleep{constructor(){this._sleep=hmSensor.createSensor(hmSensor.id.SLEEP)}updateInfo(){this._sleep.updateInfo()}getInfo(){const e=this._sleep.getBasicInfo();return{score:e.score,deepTime:e.deepMin,startTime:e.startTime,endTime:e.endTime,totalTime:this._sleep.getTotalTime()}}getStageConstantObj(){return this._sleep.getSleepStageModel()}getStage(){return this._sleep.getSleepStageData()}getSleepingStatus(){const e=Math.floor((new Time).getTime()/6e4)%1440,r=this._sleep.getBasicInfo();return e>r.startTime&&e<r.endTime?1:0}getNap(){throw new Error(e)}}class Stand extends BaseSensor{constructor(){super(hmSensor.createSensor(hmSensor.id.STAND))}}class Step extends BaseSensor{constructor(){super(hmSensor.createSensor(hmSensor.id.STEP))}}class Stress{constructor(){this._stress=hmSensor.createSensor(hmSensor.id.STRESS)}getCurrent(){return{value:this._stress.current,time:this._stress.time}}onChange(e){this._stress.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this._stress.removeEventListener(hmSensor.event.CHANGE,e)}getToday(){throw new Error(e)}getTodayByHour(){throw new Error(e)}getLastWeek(){throw new Error(e)}getLastWeekByHour(){throw new Error(e)}}class Vibrator{constructor(){this._vibrate=hmSensor.createSensor(hmSensor.id.VIBRATE)}start(e){e&&(this._savedOption=this.getConfig(),this.setMode(e)),this._vibrate.start()}stop(){this._vibrate.stop(),this._savedOption&&(this.setMode(this._savedOption),this._savedOption=void 0)}setMode(e){e.mode&&(this._vibrate.scene=e.mode)}getConfig(){return{mode:this._vibrate.scene}}}class Wear{constructor(){this._wear=hmSensor.createSensor(hmSensor.id.WEAR)}getStatus(){return this._wear.current}onChange(e){this._wear.addEventListener(hmSensor.event.CHANGE,e)}offChange(e){this._wear.removeEventListener(hmSensor.event.CHANGE,e)}}class Weather{constructor(){this._weather=hmSensor.createSensor(hmSensor.id.WEATHER)}getForecastWeather(){return this._weather.getForecastWeather()}}class Workout{getStatus(){throw new Error(e)}getHistory(){throw new Error(e)}}class WorldClock{constructor(){this._worldClock=hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)}getCount(){this._worldClock.init();const e=this._worldClock.getWorldClockCount();return this._worldClock.uninit(),e}getInfo(e){this._worldClock.init();const r=this._worldClock.getWorldClockCountInfo(e);return this._worldClock.uninit(),r}}export{Accelerometer,Barometer,Battery,BloodOxygen,Calorie,Compass,Distance,S as FREQ_MODE_HIGH,c as FREQ_MODE_LOW,m as FREQ_MODE_NORMAL,FatBurning,Geolocation,Gyroscope,HeartRate,Pai,Screen,Sleep,Stand,Step,Stress,u as TIME_HOUR_FORMAT_12,w as TIME_HOUR_FORMAT_24,Time,h as VIBRATOR_SCENE_CALL,s as VIBRATOR_SCENE_DURATION,n as VIBRATOR_SCENE_DURATION_LONG,i as VIBRATOR_SCENE_NOTIFICATION,r as VIBRATOR_SCENE_SHORT_LIGHT,t as VIBRATOR_SCENE_SHORT_MIDDLE,o as VIBRATOR_SCENE_SHORT_STRONG,a as VIBRATOR_SCENE_STRONG_REMINDER,g as VIBRATOR_SCENE_TIMER,Vibrator,Wear,Weather,Workout,WorldClock};
